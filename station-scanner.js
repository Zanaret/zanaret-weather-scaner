// Weather Station Scanner
// Scans all stations and generates individual files with their most recent weather report links

class StationScanner {
    constructor() {
        this.api = new WeatherStationAPI();
        this.stationsFolder = './Stations/';
        this.scanResults = [];
        this.processedCount = 0;
        this.totalStations = 0;
    }

    // Initialize the scanner
    async initialize() {
        console.log('üå§Ô∏è Weather Station Scanner Initializing...');
        
        // Get all stations
        const stationsResponse = await this.api.getAllStations();
        if (!stationsResponse.success) {
            throw new Error('Failed to load station data');
        }
        
        this.totalStations = stationsResponse.stations.length;
        console.log(`üìä Found ${this.totalStations} weather stations`);
        
        return stationsResponse.stations;
    }

    // Create a file for a single station
    async createStationFile(station) {
        try {
            console.log(`üîç Scanning station: ${station.name} (${station.code})`);
            
            // Get the latest XML file for this station
            const xmlResponse = await this.api.getLatestXMLFile(station.code);
            
            let fileContent = '';
            let status = '‚ùå';
            
            if (xmlResponse.success && xmlResponse.latestFile) {
                const latestFile = xmlResponse.latestFile;
                status = '‚úÖ';
                
                fileContent = `# ${station.name} Weather Station

**Station Code:** ${station.code}
**Location:** ${station.originalLat}, ${station.originalLon}
**Coordinates:** ${station.lat.toFixed(4)}¬∞N, ${station.lon.toFixed(4)}¬∞W

## Most Recent Weather Report

**Status:** ${status} Data Available
**Found in Hour:** ${xmlResponse.foundHour}
**Timestamp:** ${xmlResponse.timestamp}
**Total Files Found:** ${xmlResponse.totalFiles}

### Weather Data URL
\`\`\`
${latestFile.url}
\`\`\`

### Direct Link
[View Latest Weather Data](${latestFile.url})

### File Details
- **Filename:** ${latestFile.filename || 'N/A'}
- **Size:** ${latestFile.size || 'N/A'}
- **Context:** ${latestFile.context || 'N/A'}

---
*Generated by Weather Station Scanner on ${new Date().toLocaleString()}*
*Data source: Environment Canada (dd.meteo.gc.ca)*`;

            } else {
                fileContent = `# ${station.name} Weather Station

**Station Code:** ${station.code}
**Location:** ${station.originalLat}, ${station.originalLon}
**Coordinates:** ${station.lat.toFixed(4)}¬∞N, ${station.lon.toFixed(4)}¬∞W

## Weather Report Status

**Status:** ${status} No Data Available
**Error:** ${xmlResponse.error || 'Unknown error'}
**Timestamp:** ${xmlResponse.timestamp}

### Troubleshooting
- The station may be temporarily offline
- Data may not be available for this station
- Try checking again later

---
*Generated by Weather Station Scanner on ${new Date().toLocaleString()}*
*Data source: Environment Canada (dd.meteo.gc.ca)*`;
            }
            
            // Create filename (sanitize station name for filesystem)
            const sanitizedName = station.name
                .replace(/[<>:"/\\|?*]/g, '_') // Remove invalid characters
                .replace(/\s+/g, '_') // Replace spaces with underscores
                .replace(/__+/g, '_') // Replace multiple underscores with single
                .trim();
            
            const filename = `${sanitizedName}_${station.code}.md`;
            const filepath = this.stationsFolder + filename;
            
            // Save the file
            await this.saveFile(filepath, fileContent);
            
            // Update progress
            this.processedCount++;
            const progress = ((this.processedCount / this.totalStations) * 100).toFixed(1);
            
            console.log(`  ${status} ${station.name} - ${progress}% complete`);
            
            // Add to results
            this.scanResults.push({
                station: station,
                success: xmlResponse.success,
                hasData: xmlResponse.success && xmlResponse.latestFile,
                filename: filename,
                url: xmlResponse.success ? xmlResponse.latestFile.url : null,
                error: xmlResponse.error || null
            });
            
            // Add delay to avoid overwhelming the server
            await new Promise(resolve => setTimeout(resolve, 500));
            
        } catch (error) {
            console.error(`‚ùå Error processing station ${station.name}:`, error);
            
            this.scanResults.push({
                station: station,
                success: false,
                hasData: false,
                filename: null,
                url: null,
                error: error.message
            });
        }
    }

    // Save file to filesystem (Node.js environment)
    async saveFile(filepath, content) {
        if (typeof window !== 'undefined') {
            // Browser environment - create download
            const blob = new Blob([content], { type: 'text/markdown' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filepath.split('/').pop();
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        } else {
            // Node.js environment
            const fs = require('fs');
            const path = require('path');
            
            // Ensure directory exists
            const dir = path.dirname(filepath);
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
            
            fs.writeFileSync(filepath, content, 'utf8');
        }
    }

    // Scan all stations
    async scanAllStations() {
        try {
            console.log('üöÄ Starting Weather Station Scan...');
            
            // Initialize and get all stations
            const stations = await this.initialize();
            
            // Create summary file
            const summaryContent = this.createSummaryContent(stations);
            await this.saveFile(this.stationsFolder + 'SCAN_SUMMARY.md', summaryContent);
            
            // Process each station
            for (let i = 0; i < stations.length; i++) {
                const station = stations[i];
                await this.createStationFile(station);
                
                // Progress update every 10 stations
                if ((i + 1) % 10 === 0) {
                    console.log(`üìà Progress: ${i + 1}/${stations.length} stations processed`);
                }
            }
            
            // Create final summary
            await this.createFinalSummary();
            
            console.log('üéâ Weather Station Scan Complete!');
            console.log(`üìÅ Files generated in: ${this.stationsFolder}`);
            console.log(`üìä Total stations processed: ${this.totalStations}`);
            console.log(`‚úÖ Successful scans: ${this.scanResults.filter(r => r.success).length}`);
            console.log(`‚ùå Failed scans: ${this.scanResults.filter(r => !r.success).length}`);
            
        } catch (error) {
            console.error('üí• Scanner failed:', error);
            throw error;
        }
    }

    // Create initial summary content
    createSummaryContent(stations) {
        return `# Weather Station Scan Summary

**Scan Started:** ${new Date().toLocaleString()}
**Total Stations:** ${stations.length}

## Station List

| Station Code | Station Name | Latitude | Longitude |
|-------------|--------------|----------|-----------|
${stations.map(s => `| ${s.code} | ${s.name} | ${s.originalLat} | ${s.originalLon} |`).join('\n')}

---
*This file will be updated when the scan completes*
*Generated by Weather Station Scanner*`;
    }

    // Create final summary with results
    async createFinalSummary() {
        const successfulScans = this.scanResults.filter(r => r.success);
        const failedScans = this.scanResults.filter(r => !r.success);
        const stationsWithData = this.scanResults.filter(r => r.hasData);
        
        const summaryContent = `# Weather Station Scan Results

**Scan Completed:** ${new Date().toLocaleString()}
**Total Stations:** ${this.totalStations}
**Successful Scans:** ${successfulScans.length}
**Failed Scans:** ${failedScans.length}
**Stations with Data:** ${stationsWithData.length}

## Summary Statistics

- ‚úÖ **Successful Scans:** ${successfulScans.length} (${((successfulScans.length / this.totalStations) * 100).toFixed(1)}%)
- ‚ùå **Failed Scans:** ${failedScans.length} (${((failedScans.length / this.totalStations) * 100).toFixed(1)}%)
- üìä **Stations with Data:** ${stationsWithData.length} (${((stationsWithData.length / this.totalStations) * 100).toFixed(1)}%)

## Stations with Available Data

${stationsWithData.map(r => `- **${r.station.name}** (${r.station.code}) - [View Data](${r.url})`).join('\n')}

## Failed Scans

${failedScans.map(r => `- **${r.station.name}** (${r.station.code}) - ${r.error}`).join('\n')}

## Generated Files

Each station has its own file in the Stations folder:
${this.scanResults.filter(r => r.filename).map(r => `- \`${r.filename}\` - ${r.station.name}`).join('\n')}

---
*Generated by Weather Station Scanner*
*Data source: Environment Canada (dd.meteo.gc.ca)*`;

        await this.saveFile(this.stationsFolder + 'SCAN_RESULTS.md', summaryContent);
    }
}

// Main execution function
async function main() {
    try {
        const scanner = new StationScanner();
        await scanner.scanAllStations();
    } catch (error) {
        console.error('üí• Main execution failed:', error);
    }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { StationScanner };
}

// Auto-run if this is the main script
if (typeof window !== 'undefined') {
    // Browser environment
    window.StationScanner = StationScanner;
    console.log('üå§Ô∏è Weather Station Scanner loaded. Run: new StationScanner().scanAllStations()');
} else {
    // Node.js environment - auto-run
    main();
} 